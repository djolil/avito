//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Banner = newBannerTable("public", "banner", "")

type bannerTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	FeatureID postgres.ColumnInteger
	Name      postgres.ColumnString
	IsActive  postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BannerTable struct {
	bannerTable

	EXCLUDED bannerTable
}

// AS creates new BannerTable with assigned alias
func (a BannerTable) AS(alias string) *BannerTable {
	return newBannerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BannerTable with assigned schema name
func (a BannerTable) FromSchema(schemaName string) *BannerTable {
	return newBannerTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BannerTable with assigned table prefix
func (a BannerTable) WithPrefix(prefix string) *BannerTable {
	return newBannerTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BannerTable with assigned table suffix
func (a BannerTable) WithSuffix(suffix string) *BannerTable {
	return newBannerTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBannerTable(schemaName, tableName, alias string) *BannerTable {
	return &BannerTable{
		bannerTable: newBannerTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newBannerTableImpl("", "excluded", ""),
	}
}

func newBannerTableImpl(schemaName, tableName, alias string) bannerTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		FeatureIDColumn = postgres.IntegerColumn("feature_id")
		NameColumn      = postgres.StringColumn("name")
		IsActiveColumn  = postgres.BoolColumn("is_active")
		allColumns      = postgres.ColumnList{IDColumn, FeatureIDColumn, NameColumn, IsActiveColumn}
		mutableColumns  = postgres.ColumnList{FeatureIDColumn, NameColumn, IsActiveColumn}
	)

	return bannerTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		FeatureID: FeatureIDColumn,
		Name:      NameColumn,
		IsActive:  IsActiveColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
